**Task Description:**  
You are an SQL database expert tasked with correcting a SQL query. A previous attempt to run a query did not yield the correct results, either due to errors in execution or because the result returned was empty or unexpected. Your role is to analyze the error based on the provided database schema and the details of the failed execution, and then provide a corrected version of the SQL query.

**Procedure:**  
1. Review Database Schema:  
    - Examine the table creation statements to understand the database structure.  
2. Analyze Query Requirements:  
    - Original Question: Consider what information the query is supposed to retrieve.  
    - Hint: Use the provided hints to understand the relationships and conditions relevant to the query.  
    - Executed SQL Query: Review the SQL query that was previously executed and led to an error or incorrect result.  
    - Execution Result: Analyze the outcome of the executed query to identify why it failed (e.g., syntax errors, incorrect column references, logical mistakes).  
3. Correct the Query:  
    - Modify the SQL query to address the identified issues, ensuring it correctly fetches the requested data according to the database schema and query requirements.

**Output Format:**  
Present your corrected query as a single line of SQL code, enclosed within XML delimiter tags <FINAL_ANSWER> and </FINAL_ANSWER>. Ensure there are no line breaks within the query.

Here are some examples:  
======= Example 1 =======  
**************************  
【Table creation statements】  
CREATE DATABASE restaurants;  
CREATE SCHEMA restaurants;  

CREATE TABLE generalinfo  
(  
  id_restaurant INTEGER NOT NULL PRIMARY KEY,  
  food_type TEXT NULL, -- examples: "thai"| "food type" description: the food type  
  city TEXT NULL -- description: the city where the restaurant is located in  
);  

CREATE TABLE location  
(  
  id_restaurant INTEGER NOT NULL PRIMARY KEY,  
  street_name TEXT NULL, -- examples: "ave", "san pablo ave", "pablo ave"| "street name" description: the street name of the restaurant  
  city TEXT NULL, -- description: the city where the restaurant is located in  
  FOREIGN KEY (id_restaurant) REFERENCES restaurants.restaurants.generalinfo (id_restaurant) ON DELETE CASCADE  
);  

**************************  
【Question】  
Question:  
How many Thai restaurants can be found in San Pablo Ave, Albany?  

Evidence:  
Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'  

The SQL query executed was:  
SELECT COUNT(T1.id_restaurant) FROM restaurants.restaurants.generalinfo AS T1 INNER JOIN restaurants.restaurants.location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street = 'san pablo ave'  

The execution result:  
Error: no such column: T2.street  

**************************  

Step 1: Review Database Schema  
The database comprises two tables:  
1. restaurants.restaurants.generalinfo – Contains details about restaurants.  
2. restaurants.restaurants.location – Contains location specifics of each restaurant.  

Step 2: Analyze Query Requirements  
  - Original Question: How many Thai restaurants can be found in San Pablo Ave, Albany?  
  - Hints for Construction:  
    • "Thai restaurant" is defined by food_type = 'thai'.  
    • "San Pablo Ave Albany" is defined by street_name = 'san pablo ave' and city = 'albany'.  
  - Executed SQL Query produced an error because the column street does not exist; the correct column is street_name.  

Step 3: Correct the Query  
<FINAL_ANSWER>  
SELECT COUNT(T1.id_restaurant) FROM restaurants.restaurants.generalinfo AS T1 INNER JOIN restaurants.restaurants.location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'  
</FINAL_ANSWER>  

===== Example 2 ========  
**************************  
【Table creation statements】  

CREATE DATABASE health;  
CREATE SCHEMA health;  

CREATE TABLE businesses  
(  
  "business_id" INTEGER NOT NULL,  
  "name" TEXT NOT NULL, -- description: the name of the eatery  
  PRIMARY KEY ("business_id")  
);  

CREATE TABLE inspections  
(  
  "business_id" INTEGER NOT NULL, -- "business id" description: the unique id of the business  
  "score" INTEGER DEFAULT NULL, -- description: the inspection score  
  "date" DATE NOT NULL, -- examples: "2014-01-24"  
  FOREIGN KEY ("business_id") REFERENCES health.health.businesses ("business_id")  
);  

CREATE TABLE violations  
(  
  "business_id" INTEGER NOT NULL,  
  "date" DATE NOT NULL, -- examples: "2016-05-03"  
  FOREIGN KEY ("business_id") REFERENCES health.health.businesses ("business_id")  
);  

**************************  
【Question】  
Question:  
What are the names of the establishments that met all the required standards for 4 consecutive years?  

Evidence:  
Establishment has the same meaning as business; met all required standards for 4 consecutive years refers to four years where score = 100; year("date") = 2015;  

The SQL query executed was:  
SELECT DISTINCT T1.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', "date") AS years FROM health.health.inspections AS T1 INNER JOIN health.health.businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4  

The execution result:  
Error: T1.name is not found in table T1  

**************************  

Step 1: Review Database Schema  
Three tables exist: businesses, inspections, and violations.  

Step 2: Analyze Query Requirements  
  - The query intends to find businesses that scored 100 for four consecutive years.  
  - SQLite functions STRFTIME and DATE() were used, which are not valid in Snowflake.  

Step 3: Correct the Query using Snowflake functions  
<FINAL_ANSWER>  
SELECT DISTINCT T4.name FROM (SELECT T3.name, T3.years, ROW_NUMBER() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM (SELECT DISTINCT T2.name, TO_CHAR(T1."date",'YYYY') AS years FROM health.health.inspections AS T1 JOIN health.health.businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100) AS T3) AS T4 GROUP BY T4.name, DATEADD(year, -(T4.rowNumber - 1), TO_DATE(T4.years || '-01-01')) HAVING COUNT(T4.years) = 4  
</FINAL_ANSWER>  

======= Example 3 =======  
**************************  
【Database Info】  

CREATE DATABASE games;  
CREATE SCHEMA games;  

CREATE TABLE city  
(  
  id INTEGER NOT NULL PRIMARY KEY,  
  city_name TEXT DEFAULT NULL -- examples: "London"  
);  

CREATE TABLE games  
(  
  id INTEGER NOT NULL PRIMARY KEY,  
  games_year INTEGER DEFAULT NULL -- "games year" description: the year of the game  
);  

CREATE TABLE games_city  
(  
  games_id INTEGER DEFAULT NULL,  
  city_id INTEGER DEFAULT NULL, -- "city id" description: the id of the city that held the game Maps to city(id)  
  FOREIGN KEY (city_id) REFERENCES games.games.city(id),  
  FOREIGN KEY (games_id) REFERENCES games.games.games(id)  
);  

**************************  
【Question】  
Question:  
From 1900 to 1992, how many games did London host?  

Hint:  
From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'  

The SQL query executed was:  
SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'london' AND T3.games_year BETWEEN 1900 AND 1992  

The execution result:  
[]  

**************************  

Step 1: Review Database Schema  
Tables games.games.games, games.games.games_city, and games.games.city exist.  

Step 2: Analyze Query Requirements  
  - Ensure correct case for "London".  
  - Use fully qualified table names.  

Step 3: Correct the Query  
<FINAL_ANSWER>  
SELECT COUNT(T3.id) FROM games.games.games_city AS T1 INNER JOIN games.games.city AS T2 ON T1.city_id = T2.id INNER JOIN games.games.games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992  
</FINAL_ANSWER>  

======= Your task =======  
**************************  
【Table creation statements】  
{DATABASE_SCHEMA}  

**************************  
The original question is:  
Question:  
{QUESTION}  

Evidence:  
{HINT}  

The SQL query executed was:  
{QUERY}  

The execution result:  
{RESULT}  

**************************  
Based on the question, table schemas and the previous query, analyze the result and try to fix the query.  

When you are SURE that you fixed the query, output the query string ONLY inside the xml delimiter <FINAL_ANSWER></FINAL_ANSWER>.  
Inside the xml delimiter it should be the query in plain text.  

You cannot modify the database schema or the question, just output the corrected query.  
Make sure you only output one single query. The query should be a one-liner without any line breaks.  

Example of correct format:  
<FINAL_ANSWER>  
SELECT column FROM table WHERE condition  
</FINAL_ANSWER>